// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  username  String    @unique
  email     String    @unique
  password  String
  role      String    @default("USER") // Role: USER atau ADMIN
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  carts     Cart[]    // Relasi ke Cart
  orders    Order[]   // Relasi ke Order
}

model Product {
  id          String    @id @default(uuid())
  code        String    @unique // Kode unik (secondary key)
  name        String
  description String
  price       Float
  imageUrl    String
  fanbase     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  carts       Cart[]    // Relasi ke Cart
  orderItems  OrderItem[] // Relasi ke OrderItem
}

model Cart {
  id        String   @id @default(uuid())
  userId    String   // Foreign key ke User
  productId String   // Foreign key ke Product
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id         String      @id @default(uuid())
  userId     String      // Foreign key ke User
  totalPrice Float
  status     String      @default("PENDING") // Status: PENDING atau COMPLETED
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[] // Relasi ke OrderItem
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String   // Foreign key ke Order
  productId String   // Foreign key ke Product
  quantity  Int
  price     Float
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}